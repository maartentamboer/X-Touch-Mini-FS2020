{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"X-Touch-Mini-FS2020 Control FS2020 with a Behringer X-Touch Mini. This documentation site is still a work in progress.","title":"Home"},{"location":"#x-touch-mini-fs2020","text":"Control FS2020 with a Behringer X-Touch Mini. This documentation site is still a work in progress.","title":"X-Touch-Mini-FS2020"},{"location":"aircraft-details/a320/fcu/","text":"","title":"FCU"},{"location":"aircraft-details/a320/general/","text":"General A subchapter { \"index\" : 2 , \"event_up\" : \"AP_SPD_VAR_INC\" , \"event_down\" : \"AP_SPD_VAR_DEC\" , \"event_press\" : { \"event\" : \"SPEED_SLOT_INDEX_SET\" , \"type\" : \"manual\" , \"value\" : 1 , \"description\" : \"A32NX - set AP Speed Hold to selected mode\" }, \"event_long_press\" : { \"event\" : \"SPEED_SLOT_INDEX_SET\" , \"type\" : \"manual\" , \"value\" : 2 , \"description\" : \"A32NX - set AP Speed Hold to managed mode\" } Another subchapter a subsub chapter","title":"General"},{"location":"aircraft-details/a320/general/#general","text":"","title":"General"},{"location":"aircraft-details/a320/general/#a-subchapter","text":"{ \"index\" : 2 , \"event_up\" : \"AP_SPD_VAR_INC\" , \"event_down\" : \"AP_SPD_VAR_DEC\" , \"event_press\" : { \"event\" : \"SPEED_SLOT_INDEX_SET\" , \"type\" : \"manual\" , \"value\" : 1 , \"description\" : \"A32NX - set AP Speed Hold to selected mode\" }, \"event_long_press\" : { \"event\" : \"SPEED_SLOT_INDEX_SET\" , \"type\" : \"manual\" , \"value\" : 2 , \"description\" : \"A32NX - set AP Speed Hold to managed mode\" }","title":"A subchapter"},{"location":"aircraft-details/a320/general/#another-subchapter","text":"","title":"Another subchapter"},{"location":"aircraft-details/a320/general/#a-subsub-chapter","text":"","title":"a subsub chapter"},{"location":"aircraft-details/a320/overhead/","text":"","title":"Overhead"},{"location":"aircraft-details/cj4/general/","text":"","title":"General"},{"location":"configuration/aircraft/","text":"Aircraft specific The aircraft specific configuration file consists of multiple parts. Element Description $schema Indicate to the text editor which schema to use version Version of the json format, currently use 1.0.0 encoders A list of the encoders buttons A list of the buttons triggers A list of triggers Schema JSON Schema enables validation and autocompletion of json files. \"$schema\" : \"./config.schema.json\" , Version The version element is here for the future in case a breaking change is introduced. \"version\" : { \"major\" : 1 , \"minor\" : 0 , \"patch\" : 0 }, Others All the other elements are explained in seperate pages.","title":"Aircraft specific"},{"location":"configuration/aircraft/#aircraft-specific","text":"The aircraft specific configuration file consists of multiple parts. Element Description $schema Indicate to the text editor which schema to use version Version of the json format, currently use 1.0.0 encoders A list of the encoders buttons A list of the buttons triggers A list of triggers","title":"Aircraft specific"},{"location":"configuration/aircraft/#schema","text":"JSON Schema enables validation and autocompletion of json files. \"$schema\" : \"./config.schema.json\" ,","title":"Schema"},{"location":"configuration/aircraft/#version","text":"The version element is here for the future in case a breaking change is introduced. \"version\" : { \"major\" : 1 , \"minor\" : 0 , \"patch\" : 0 },","title":"Version"},{"location":"configuration/aircraft/#others","text":"All the other elements are explained in seperate pages.","title":"Others"},{"location":"configuration/buttons/","text":"Buttons The buttons element consists of a list of buttons. Each button object can contain the following elements. Element Mandatory Description index Index of the button. 1-16 for layer A, 17-32 for layer B event_press The event to execute when the button is pressed down event_short_press The event to execute when the button is pressed and released event_long_press The event to execute when the button is pressed for 0.5 seconds and released simvar_led The simvar to monitor for setting the button led Event press The event_press , event_short_press and event_long_press give the option to fire off an event when a button is pressed. The following example toggles the flight director on the autopilot of the plane. { \"index\" : 1 , \"event_press\" : \"TOGGLE_FLIGHT_DIRECTOR\" , }, These events also support manual events and conditional events, information about those can be found in the advanced section. Simvar led The X-Touch has illuminated buttons so it is possible to view the status of simvars. This means that the LEDs are always syncronized with what's happening in the plane. You can enable something with this application and then use a mouse in the cockpit to disable it the LED always indicates the actual status. The previous example has now been expanded to make sure the LED indicates the status of the flight director. { \"index\" : 1 , \"event_press\" : \"TOGGLE_FLIGHT_DIRECTOR\" , \"simvar_led\" : \"AUTOPILOT_FLIGHT_DIRECTOR_ACTIVE\" },","title":"Buttons"},{"location":"configuration/buttons/#buttons","text":"The buttons element consists of a list of buttons. Each button object can contain the following elements. Element Mandatory Description index Index of the button. 1-16 for layer A, 17-32 for layer B event_press The event to execute when the button is pressed down event_short_press The event to execute when the button is pressed and released event_long_press The event to execute when the button is pressed for 0.5 seconds and released simvar_led The simvar to monitor for setting the button led","title":"Buttons"},{"location":"configuration/buttons/#event-press","text":"The event_press , event_short_press and event_long_press give the option to fire off an event when a button is pressed. The following example toggles the flight director on the autopilot of the plane. { \"index\" : 1 , \"event_press\" : \"TOGGLE_FLIGHT_DIRECTOR\" , }, These events also support manual events and conditional events, information about those can be found in the advanced section.","title":"Event press"},{"location":"configuration/buttons/#simvar-led","text":"The X-Touch has illuminated buttons so it is possible to view the status of simvars. This means that the LEDs are always syncronized with what's happening in the plane. You can enable something with this application and then use a mouse in the cockpit to disable it the LED always indicates the actual status. The previous example has now been expanded to make sure the LED indicates the status of the flight director. { \"index\" : 1 , \"event_press\" : \"TOGGLE_FLIGHT_DIRECTOR\" , \"simvar_led\" : \"AUTOPILOT_FLIGHT_DIRECTOR_ACTIVE\" },","title":"Simvar led"},{"location":"configuration/configuration/","text":"Configuration The configuration of the application is done through json files. Overview The configuration files can be found in the Configurations folder. There is one global configuration file config.json and seperate configs for airplanes. The config.schema.json is for your text editor so it can help you autocomplete or highlight potential erros. The Functions directory contains the jinja2 functions that are part of conditional triggers. This is an advanced topic. Editing The recommended editor for modifying the config files is Visual Studio Code . When working on the jinja2 functions install the Better Jinja for syntax highlighting.","title":"Configuration"},{"location":"configuration/configuration/#configuration","text":"The configuration of the application is done through json files.","title":"Configuration"},{"location":"configuration/configuration/#overview","text":"The configuration files can be found in the Configurations folder. There is one global configuration file config.json and seperate configs for airplanes. The config.schema.json is for your text editor so it can help you autocomplete or highlight potential erros. The Functions directory contains the jinja2 functions that are part of conditional triggers. This is an advanced topic.","title":"Overview"},{"location":"configuration/configuration/#editing","text":"The recommended editor for modifying the config files is Visual Studio Code . When working on the jinja2 functions install the Better Jinja for syntax highlighting.","title":"Editing"},{"location":"configuration/encoders/","text":"Encoders The encoders element consists of a list of encoders. Each encoder object can contain the following elements. Element Mandatory Description index Index of the encoder. 1-8 for layer A, 9-16 for layer B event_up The event to execute for CW rotation ticks event_down The event to execute for CCW rotation ticks alternate_event_up The alternate event to execute for CW rotation ticks alternate_event_down The alternate event to execute for CCW rotation ticks event_press The event to execute when the button is pressed down event_short_press The event to execute when the button is pressed and released event_long_press The event to execute when the button is pressed for 0.5 seconds and released Event up, down The most basic configuration of an encoder just consists of the index and the event_up / event_down . The next example modifies the Baro setting of the airplane. It does this by sending the KOHLSMAN_INC event when the encoder is rotated CW and sending the KOHLSMAN_DEC event for CCW rotation. { \"index\" : 1 , \"event_up\" : \"KOHLSMAN_INC\" , \"event_down\" : \"KOHLSMAN_DEC\" , }, These events also support manual events and conditional events, information about those can be found in the advanced section. Event press The event_press , event_short_press and event_long_press give the option to fire off an event when a button is pressed. { \"index\" : 1 , \"event_up\" : \"KOHLSMAN_INC\" , \"event_down\" : \"KOHLSMAN_DEC\" , \"event_press\" : \"BAROMETRIC\" }, These events also support manual events and conditional events, information about those can be found in the advanced section. Alternate events Sometimes you want to have a single encoder control multiple things. This can be achieved by setting up an alternate. The next example shows how to control the NAV1 radio. The encoder is able to control the whole increments and the fractional increments. When the button has a short press it sees the {alternate} keyword and therefore knows that the encoder must be switched between whole and fractional. { \"index\" : 6 , \"event_up\" : \"NAV1_RADIO_WHOLE_INC\" , \"event_down\" : \"NAV1_RADIO_WHOLE_DEC\" , \"alternate_event_up\" : \"NAV1_RADIO_FRACT_INC\" , \"alternate_event_down\" : \"NAV1_RADIO_FRACT_DEC\" , \"event_short_press\" : \"{alternate}\" , \"event_long_press\" : \"NAV1_RADIO_SWAP\" },","title":"Encoders"},{"location":"configuration/encoders/#encoders","text":"The encoders element consists of a list of encoders. Each encoder object can contain the following elements. Element Mandatory Description index Index of the encoder. 1-8 for layer A, 9-16 for layer B event_up The event to execute for CW rotation ticks event_down The event to execute for CCW rotation ticks alternate_event_up The alternate event to execute for CW rotation ticks alternate_event_down The alternate event to execute for CCW rotation ticks event_press The event to execute when the button is pressed down event_short_press The event to execute when the button is pressed and released event_long_press The event to execute when the button is pressed for 0.5 seconds and released","title":"Encoders"},{"location":"configuration/encoders/#event-up-down","text":"The most basic configuration of an encoder just consists of the index and the event_up / event_down . The next example modifies the Baro setting of the airplane. It does this by sending the KOHLSMAN_INC event when the encoder is rotated CW and sending the KOHLSMAN_DEC event for CCW rotation. { \"index\" : 1 , \"event_up\" : \"KOHLSMAN_INC\" , \"event_down\" : \"KOHLSMAN_DEC\" , }, These events also support manual events and conditional events, information about those can be found in the advanced section.","title":"Event up, down"},{"location":"configuration/encoders/#event-press","text":"The event_press , event_short_press and event_long_press give the option to fire off an event when a button is pressed. { \"index\" : 1 , \"event_up\" : \"KOHLSMAN_INC\" , \"event_down\" : \"KOHLSMAN_DEC\" , \"event_press\" : \"BAROMETRIC\" }, These events also support manual events and conditional events, information about those can be found in the advanced section.","title":"Event press"},{"location":"configuration/encoders/#alternate-events","text":"Sometimes you want to have a single encoder control multiple things. This can be achieved by setting up an alternate. The next example shows how to control the NAV1 radio. The encoder is able to control the whole increments and the fractional increments. When the button has a short press it sees the {alternate} keyword and therefore knows that the encoder must be switched between whole and fractional. { \"index\" : 6 , \"event_up\" : \"NAV1_RADIO_WHOLE_INC\" , \"event_down\" : \"NAV1_RADIO_WHOLE_DEC\" , \"alternate_event_up\" : \"NAV1_RADIO_FRACT_INC\" , \"alternate_event_down\" : \"NAV1_RADIO_FRACT_DEC\" , \"event_short_press\" : \"{alternate}\" , \"event_long_press\" : \"NAV1_RADIO_SWAP\" },","title":"Alternate events"},{"location":"configuration/fader/","text":"Fader The faders element consists of a list of faders. Each fader object can contain the following elements. Element Mandatory Description index Index of the fader. 1 for layer A, 2 for layer B event_change The event to execute when the fader is moved min_value The value to send when the fader is at the bottom max_value The value to send when the fader is at the top This example shows how to control the throttle. The min and max values are found by looking in the EventList.py from the simconnect library. { \"index\" : 1 , \"event_change\" : \"THROTTLE_SET\" , \"min_value\" : 0 , \"max_value\" : 16383 }","title":"Fader"},{"location":"configuration/fader/#fader","text":"The faders element consists of a list of faders. Each fader object can contain the following elements. Element Mandatory Description index Index of the fader. 1 for layer A, 2 for layer B event_change The event to execute when the fader is moved min_value The value to send when the fader is at the bottom max_value The value to send when the fader is at the top This example shows how to control the throttle. The min and max values are found by looking in the EventList.py from the simconnect library. { \"index\" : 1 , \"event_change\" : \"THROTTLE_SET\" , \"min_value\" : 0 , \"max_value\" : 16383 }","title":"Fader"},{"location":"configuration/global/","text":"Global configuration file The global configuration file consists of multiple parts. Element Description default The default configuration to be loaded aircraft Aircraft specific configurations midi_input_device The name of the midi input midi_output_device The name of the midi output additional_simvars Extra simvars that are not available in python-simconnect Default Which json file to load when there is no match from the aircraft_contains elements of the aircraft element. \"default\" : \"config_default.json\" , Aircraft Warning Please note that the name of the aircraft can be different when selecting another livery, so select an identifier that is always there. Load a specific config file when the name of the aircraft contains a specific string. To find out the name of your aircraft look at the output of the application when you switch aircraft. \"aircraft\" : [ { \"aircraft_contains\" : \"A320\" , \"file\" : \"config_a320.json\" } ], Midi input & output device Generally this is always X-TOUCH MINI 0 for the input and X-TOUCH MINI 1 for the output. But if you have more midi devices connected to your PC it might be different. To find out which device you need to select, launch the application and it will print out the found input and output devices. \"midi_input_device\" : \"X-TOUCH MINI 0\" , \"midi_output_device\" : \"X-TOUCH MINI 1\" , Additional simvars This is an advanced use case. This application uses the Python-SimConnect library to communicate with the Flight Simulator, but the library does not have all the simvars built in. To find out which simvars are built in look in the RequestList.py . Any additional simvars can be defined in this element. \"additional_simvars\" : [ { \"name\" : \"APU_SWITCH\" , \"description\" : \"When the APU is available\" , \"simvar\" : \"APU SWITCH\" , \"type\" : \"Bool\" , \"writable\" : false } ] Element Description name The name that you reference in the config files description Description simvar Name of the actual simvar in MSFS type The type of the simvar, view Requestlist.py for possibilities writable true when you can write to the simvar","title":"Global"},{"location":"configuration/global/#global-configuration-file","text":"The global configuration file consists of multiple parts. Element Description default The default configuration to be loaded aircraft Aircraft specific configurations midi_input_device The name of the midi input midi_output_device The name of the midi output additional_simvars Extra simvars that are not available in python-simconnect","title":"Global configuration file"},{"location":"configuration/global/#default","text":"Which json file to load when there is no match from the aircraft_contains elements of the aircraft element. \"default\" : \"config_default.json\" ,","title":"Default"},{"location":"configuration/global/#aircraft","text":"Warning Please note that the name of the aircraft can be different when selecting another livery, so select an identifier that is always there. Load a specific config file when the name of the aircraft contains a specific string. To find out the name of your aircraft look at the output of the application when you switch aircraft. \"aircraft\" : [ { \"aircraft_contains\" : \"A320\" , \"file\" : \"config_a320.json\" } ],","title":"Aircraft"},{"location":"configuration/global/#midi-input-output-device","text":"Generally this is always X-TOUCH MINI 0 for the input and X-TOUCH MINI 1 for the output. But if you have more midi devices connected to your PC it might be different. To find out which device you need to select, launch the application and it will print out the found input and output devices. \"midi_input_device\" : \"X-TOUCH MINI 0\" , \"midi_output_device\" : \"X-TOUCH MINI 1\" ,","title":"Midi input &amp; output device"},{"location":"configuration/global/#additional-simvars","text":"This is an advanced use case. This application uses the Python-SimConnect library to communicate with the Flight Simulator, but the library does not have all the simvars built in. To find out which simvars are built in look in the RequestList.py . Any additional simvars can be defined in this element. \"additional_simvars\" : [ { \"name\" : \"APU_SWITCH\" , \"description\" : \"When the APU is available\" , \"simvar\" : \"APU SWITCH\" , \"type\" : \"Bool\" , \"writable\" : false } ] Element Description name The name that you reference in the config files description Description simvar Name of the actual simvar in MSFS type The type of the simvar, view Requestlist.py for possibilities writable true when you can write to the simvar","title":"Additional simvars"},{"location":"configuration/triggers/","text":"Triggers The triggers element consists of a list of trigger. Each trigger object can contain the following elements. Triggers enable the application to act on a change of a simvar. For example to trigger an alternate of an encoder. Element Mandatory Description simvar The simvar to monitor trigger_type The type of the trigger trigger_index The index of the element to trigger condition The condition when the trigger_type is set to condition Type Th trigger_type can be set to encoder , condition or condition-file . The 2 condition types are explained in the advanced section. The encoder type can be used to trigger the alternate mode of an encoder. Example Most autopilot stacks have a single wheel to control either the vertical speed or the speed itself, depending whether it's in FLC or VS mode. To have a single encoder control both, an alternate must be added so the encoder can sent both events. To automatically switch between the alternates a trigger is made to monitor the AUTOPILOT_VERTICAL_HOLD . When AUTOPILOT_VERTICAL_HOLD is true the encoder is set to alternate, otherwise it's in the default setting. { \"simvar\" : \"AUTOPILOT_VERTICAL_HOLD\" , \"trigger_type\" : \"encoder\" , \"trigger_index\" : 5 } { \"index\" : 5 , \"event_up\" : \"AP_SPD_VAR_INC\" , \"event_down\" : \"AP_SPD_VAR_DEC\" , \"alternate_event_up\" : \"AP_VS_VAR_INC\" , \"alternate_event_down\" : \"AP_VS_VAR_DEC\" }","title":"Triggers"},{"location":"configuration/triggers/#triggers","text":"The triggers element consists of a list of trigger. Each trigger object can contain the following elements. Triggers enable the application to act on a change of a simvar. For example to trigger an alternate of an encoder. Element Mandatory Description simvar The simvar to monitor trigger_type The type of the trigger trigger_index The index of the element to trigger condition The condition when the trigger_type is set to condition","title":"Triggers"},{"location":"configuration/triggers/#type","text":"Th trigger_type can be set to encoder , condition or condition-file . The 2 condition types are explained in the advanced section. The encoder type can be used to trigger the alternate mode of an encoder.","title":"Type"},{"location":"configuration/triggers/#example","text":"Most autopilot stacks have a single wheel to control either the vertical speed or the speed itself, depending whether it's in FLC or VS mode. To have a single encoder control both, an alternate must be added so the encoder can sent both events. To automatically switch between the alternates a trigger is made to monitor the AUTOPILOT_VERTICAL_HOLD . When AUTOPILOT_VERTICAL_HOLD is true the encoder is set to alternate, otherwise it's in the default setting. { \"simvar\" : \"AUTOPILOT_VERTICAL_HOLD\" , \"trigger_type\" : \"encoder\" , \"trigger_index\" : 5 } { \"index\" : 5 , \"event_up\" : \"AP_SPD_VAR_INC\" , \"event_down\" : \"AP_SPD_VAR_DEC\" , \"alternate_event_up\" : \"AP_VS_VAR_INC\" , \"alternate_event_down\" : \"AP_VS_VAR_DEC\" }","title":"Example"},{"location":"configuration/advanced/conditional-events/","text":"Conditional events Conditional events give the option to run a script whenever it's executed. They can be used in event_* or in the triggers section. Element Mandatory Description type condition or condition-file event When on condition an array of strings. When on condition-file the path to a jinja2 file description Description for your own reference Condition This is the older syntax where the script is directly defined in the json file. It is not very readable so the condition-file is a better option, especially for larger scripts. { \"trigger_type\" : \"condition\" , \"simvar\" : \"AUTOPILOT_HEADING_LOCK_DIR\" , \"condition\" : [ \"{% set heading = (data.get_simvar_value('AUTOPILOT_HEADING_LOCK_DIR') / 27.0) | round %}\" , \"{{ data.set_encoder_led_value(2, heading) }}\" ] } Condition file condition-file enables the condition to be made in a seperate file. This enables syntax highlighting in Visual Studio Code and leaves the json file readable. \"event_press\" : { \"type\" : \"condition-file\" , \"event\" : \"Functions/Generic/heading-bug-sync.jinja2\" , \"description\" : \"Set heading bug to current heading\" } {# Set the heading bug to the current flown heading #} {# HEADING_INDICATOR returns in radians but HEADING_BUG_SET needs it in degrees #} {% set heading = ( data.get_simvar_value ( 'HEADING_INDICATOR' ) * 180 / 3.14 ) | round %} {{ data.trigger_event ( 'HEADING_BUG_SET' , heading ) }} Condition syntax The condition uses jinja2 to execute the script. To understand the full capabilities of this read the Template Designer Documentation . Available functions In the jinja code there is a data object available which is an instance of the conditionalrunner.py . With this object functions can be called to execute specific actions. Function Description data . get_simvar_value ( name : str ) Get the value of a simvar data . set_simvar_value ( name : str , value ) Set the value of a simvar data . trigger_event ( name : str , value ) Trigger an event data . trigger_encoder_alternate ( index : int , value : bool ) Trigger the alternate mode of an encoder data . set_global_variable ( key : str , value ) Set a variable in the application, this can be used in other conditions, data . get_global_variable ( key : str ) Get a variable from the application data . print ( data ) Print something in the console output of the application data . set_button_led ( index : int , on : bool , blink = False ) Set the LED of a button data . set_encoder_led ( index : int , on : bool , blink = False ) Set the entire LED ring of an encoder data . set_encoder_led_value ( index : int , value : int , blink = False ) Set the LED ring to a specific value Examples with explanation This first example can be used to synchronize the heading bug to the current flown heading. First the HEADING_INDICATOR simvar is read, this returns the current heading in radians. These radians are then converted to degrees, rounded to a whole number and stored in the script variable heading . The script variable is then used as the parameter for the trigger_event function. {# Set the heading bug to the current flown heading #} {# HEADING_INDICATOR returns in radians but HEADING_BUG_SET needs it in degrees #} {% set heading = ( data.get_simvar_value ( 'HEADING_INDICATOR' ) * 180 / 3.14 ) | round %} {{ data.trigger_event ( 'HEADING_BUG_SET' , heading ) }} This example monitors the AUTOPILOT_VERTICAL_HOLD simvar and triggers the alternate mode for an encoder. The LED of the encoder is also updated based on the status. {% if data.get_simvar_value ( 'AUTOPILOT_VERTICAL_HOLD' ) == 1.0 %} {{ data.trigger_encoder_alternate ( 5 , True ) }} {{ data.set_encoder_led ( 5 , True ) }} {% else %} {{ data.trigger_encoder_alternate ( 5 , False ) }} {{ data.set_encoder_led ( 5 , False ) }} {% endif %}","title":"Conditional events"},{"location":"configuration/advanced/conditional-events/#conditional-events","text":"Conditional events give the option to run a script whenever it's executed. They can be used in event_* or in the triggers section. Element Mandatory Description type condition or condition-file event When on condition an array of strings. When on condition-file the path to a jinja2 file description Description for your own reference","title":"Conditional events"},{"location":"configuration/advanced/conditional-events/#condition","text":"This is the older syntax where the script is directly defined in the json file. It is not very readable so the condition-file is a better option, especially for larger scripts. { \"trigger_type\" : \"condition\" , \"simvar\" : \"AUTOPILOT_HEADING_LOCK_DIR\" , \"condition\" : [ \"{% set heading = (data.get_simvar_value('AUTOPILOT_HEADING_LOCK_DIR') / 27.0) | round %}\" , \"{{ data.set_encoder_led_value(2, heading) }}\" ] }","title":"Condition"},{"location":"configuration/advanced/conditional-events/#condition-file","text":"condition-file enables the condition to be made in a seperate file. This enables syntax highlighting in Visual Studio Code and leaves the json file readable. \"event_press\" : { \"type\" : \"condition-file\" , \"event\" : \"Functions/Generic/heading-bug-sync.jinja2\" , \"description\" : \"Set heading bug to current heading\" } {# Set the heading bug to the current flown heading #} {# HEADING_INDICATOR returns in radians but HEADING_BUG_SET needs it in degrees #} {% set heading = ( data.get_simvar_value ( 'HEADING_INDICATOR' ) * 180 / 3.14 ) | round %} {{ data.trigger_event ( 'HEADING_BUG_SET' , heading ) }}","title":"Condition file"},{"location":"configuration/advanced/conditional-events/#condition-syntax","text":"The condition uses jinja2 to execute the script. To understand the full capabilities of this read the Template Designer Documentation .","title":"Condition syntax"},{"location":"configuration/advanced/conditional-events/#available-functions","text":"In the jinja code there is a data object available which is an instance of the conditionalrunner.py . With this object functions can be called to execute specific actions. Function Description data . get_simvar_value ( name : str ) Get the value of a simvar data . set_simvar_value ( name : str , value ) Set the value of a simvar data . trigger_event ( name : str , value ) Trigger an event data . trigger_encoder_alternate ( index : int , value : bool ) Trigger the alternate mode of an encoder data . set_global_variable ( key : str , value ) Set a variable in the application, this can be used in other conditions, data . get_global_variable ( key : str ) Get a variable from the application data . print ( data ) Print something in the console output of the application data . set_button_led ( index : int , on : bool , blink = False ) Set the LED of a button data . set_encoder_led ( index : int , on : bool , blink = False ) Set the entire LED ring of an encoder data . set_encoder_led_value ( index : int , value : int , blink = False ) Set the LED ring to a specific value","title":"Available functions"},{"location":"configuration/advanced/conditional-events/#examples-with-explanation","text":"This first example can be used to synchronize the heading bug to the current flown heading. First the HEADING_INDICATOR simvar is read, this returns the current heading in radians. These radians are then converted to degrees, rounded to a whole number and stored in the script variable heading . The script variable is then used as the parameter for the trigger_event function. {# Set the heading bug to the current flown heading #} {# HEADING_INDICATOR returns in radians but HEADING_BUG_SET needs it in degrees #} {% set heading = ( data.get_simvar_value ( 'HEADING_INDICATOR' ) * 180 / 3.14 ) | round %} {{ data.trigger_event ( 'HEADING_BUG_SET' , heading ) }} This example monitors the AUTOPILOT_VERTICAL_HOLD simvar and triggers the alternate mode for an encoder. The LED of the encoder is also updated based on the status. {% if data.get_simvar_value ( 'AUTOPILOT_VERTICAL_HOLD' ) == 1.0 %} {{ data.trigger_encoder_alternate ( 5 , True ) }} {{ data.set_encoder_led ( 5 , True ) }} {% else %} {{ data.trigger_encoder_alternate ( 5 , False ) }} {{ data.set_encoder_led ( 5 , False ) }} {% endif %}","title":"Examples with explanation"},{"location":"configuration/advanced/manual-events/","text":"Manual events Manual events give the option to attach a value when an event is called. Element Mandatory Description event The event to call type Always set to manual value The value to send with the event description Description for your own reference Example For example to select the speed mode in the A320 SPEED_SLOT_INDEX_SET event can be set to 1 for selected mode and 2 for managed mode. \"event_short_press\" : { \"event\" : \"SPEED_SLOT_INDEX_SET\" , \"type\" : \"manual\" , \"value\" : 1 , \"description\" : \"A32NX - set AP Speed Hold to selected mode\" }, \"event_long_press\" : { \"event\" : \"SPEED_SLOT_INDEX_SET\" , \"type\" : \"manual\" , \"value\" : 2 , \"description\" : \"A32NX - set AP Speed Hold to managed mode\" }","title":"Manual events"},{"location":"configuration/advanced/manual-events/#manual-events","text":"Manual events give the option to attach a value when an event is called. Element Mandatory Description event The event to call type Always set to manual value The value to send with the event description Description for your own reference","title":"Manual events"},{"location":"configuration/advanced/manual-events/#example","text":"For example to select the speed mode in the A320 SPEED_SLOT_INDEX_SET event can be set to 1 for selected mode and 2 for managed mode. \"event_short_press\" : { \"event\" : \"SPEED_SLOT_INDEX_SET\" , \"type\" : \"manual\" , \"value\" : 1 , \"description\" : \"A32NX - set AP Speed Hold to selected mode\" }, \"event_long_press\" : { \"event\" : \"SPEED_SLOT_INDEX_SET\" , \"type\" : \"manual\" , \"value\" : 2 , \"description\" : \"A32NX - set AP Speed Hold to managed mode\" }","title":"Example"},{"location":"configuration/advanced/multi-events/","text":"Multiple events It is possible to sent multiple events by defining an array for any of the events. This example of a button toggles the flight director and AP master at the same time. { \"index\" : 1 , \"event_press\" : [ \"TOGGLE_FLIGHT_DIRECTOR\" , \"AP_MASTER\" ], \"simvar_led\" : \"AUTOPILOT_FLIGHT_DIRECTOR_ACTIVE\" }","title":"Multiple events"},{"location":"configuration/advanced/multi-events/#multiple-events","text":"It is possible to sent multiple events by defining an array for any of the events. This example of a button toggles the flight director and AP master at the same time. { \"index\" : 1 , \"event_press\" : [ \"TOGGLE_FLIGHT_DIRECTOR\" , \"AP_MASTER\" ], \"simvar_led\" : \"AUTOPILOT_FLIGHT_DIRECTOR_ACTIVE\" }","title":"Multiple events"},{"location":"getting-started/developing/","text":"Developing Info If you just want to use or change the config files proceed to the next section. To develop on the project, perform the following steps. Prerequisites This project uses Python 3.8 for the code, it is also needed to preview the documentation locally. This can be installed from the Python website . Make sure to select checkmark to add Python into the system path. You may also need Visual C++ which can be installed via the build tools installer Documentation The documentation uses mkdocs with the material theme. The table of contents is managed in mkdocs.yml , all the pages are located in the docs subfolder. Run the following commands once to install mkdocs. pip install mkdocs pip install mkdocs-material After that the documentation can be generated with the command below. This will host a website on localhost that is automatically updated when you save a file. mkdocs serve Code To work on the code clone the code, setup a virtual environment and install the requirements. REM Create and activate a virtual environment python -m venv env .\\env\\Scripts\\activate REM Install requirements pip install -r requirements.txt REM Start msfs and run the application python main.py Building the exe The exe is created with pyinstaller this needs to be installed seperately through pip install pyinstaller . After that create the exe with the following command: pyinstaller main.spec","title":"Developing"},{"location":"getting-started/developing/#developing","text":"Info If you just want to use or change the config files proceed to the next section. To develop on the project, perform the following steps.","title":"Developing"},{"location":"getting-started/developing/#prerequisites","text":"This project uses Python 3.8 for the code, it is also needed to preview the documentation locally. This can be installed from the Python website . Make sure to select checkmark to add Python into the system path. You may also need Visual C++ which can be installed via the build tools installer","title":"Prerequisites"},{"location":"getting-started/developing/#documentation","text":"The documentation uses mkdocs with the material theme. The table of contents is managed in mkdocs.yml , all the pages are located in the docs subfolder. Run the following commands once to install mkdocs. pip install mkdocs pip install mkdocs-material After that the documentation can be generated with the command below. This will host a website on localhost that is automatically updated when you save a file. mkdocs serve","title":"Documentation"},{"location":"getting-started/developing/#code","text":"To work on the code clone the code, setup a virtual environment and install the requirements. REM Create and activate a virtual environment python -m venv env .\\env\\Scripts\\activate REM Install requirements pip install -r requirements.txt REM Start msfs and run the application python main.py","title":"Code"},{"location":"getting-started/developing/#building-the-exe","text":"The exe is created with pyinstaller this needs to be installed seperately through pip install pyinstaller . After that create the exe with the following command: pyinstaller main.spec","title":"Building the exe"},{"location":"getting-started/general/","text":"Installation & Configuration Download Download the zip and extract it. Download latest version View all versions Configure X-Touch The encoders of X-Touch must be set to Relative2 mode to work with this application. This can be done in the X-Touch editor software from Behringer than can be downloaded from the product page . You only need to do this once. Open the X-Touch editor Click the Load button and select LayerA.bin from the X-Touch-Editor-Configs folder Click the Dump A button to write the config to the X-Touch Click the Load button and select LayerB.bin from the X-Touch-Editor-Configs folder Click the Dump B button to write the config to the X-Touch Run Flight Simulator 2020 must be running before you start this application. Once you're in the main menu double click X-Touch-Mini-FS2020.exe to start the application. Changing the configuration See the Configuration guide for more information","title":"Installation & Configuration"},{"location":"getting-started/general/#installation-configuration","text":"","title":"Installation &amp; Configuration"},{"location":"getting-started/general/#download","text":"Download the zip and extract it. Download latest version View all versions","title":"Download"},{"location":"getting-started/general/#configure-x-touch","text":"The encoders of X-Touch must be set to Relative2 mode to work with this application. This can be done in the X-Touch editor software from Behringer than can be downloaded from the product page . You only need to do this once. Open the X-Touch editor Click the Load button and select LayerA.bin from the X-Touch-Editor-Configs folder Click the Dump A button to write the config to the X-Touch Click the Load button and select LayerB.bin from the X-Touch-Editor-Configs folder Click the Dump B button to write the config to the X-Touch","title":"Configure X-Touch"},{"location":"getting-started/general/#run","text":"Flight Simulator 2020 must be running before you start this application. Once you're in the main menu double click X-Touch-Mini-FS2020.exe to start the application.","title":"Run"},{"location":"getting-started/general/#changing-the-configuration","text":"See the Configuration guide for more information","title":"Changing the configuration"},{"location":"getting-started/how/","text":"How does it work This application receives midi data from the X-Touch and translates it to events in FS2020. It receives data from FS2020 through simvars and controls the LEDs on the buttons and the encoders. Events A list of supported events can be found in Eventlist.py Simvars A list of supported simvars can be found in RequestList.py","title":"How does it work"},{"location":"getting-started/how/#how-does-it-work","text":"This application receives midi data from the X-Touch and translates it to events in FS2020. It receives data from FS2020 through simvars and controls the LEDs on the buttons and the encoders.","title":"How does it work"},{"location":"getting-started/how/#events","text":"A list of supported events can be found in Eventlist.py","title":"Events"},{"location":"getting-started/how/#simvars","text":"A list of supported simvars can be found in RequestList.py","title":"Simvars"}]}